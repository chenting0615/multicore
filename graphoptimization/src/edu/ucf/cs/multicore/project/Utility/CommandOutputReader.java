package edu.ucf.cs.multicore.project.Utility;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import org.apache.log4j.Level;public class CommandOutputReader extends Thread{	private transient InputStream inputStream; // to get output of any command	private transient String output; // output will store command output	protected boolean isDone;	public CommandOutputReader()	{		super();		output = "";	}	public CommandOutputReader(InputStream stream)	{		super();		output = "";		this.inputStream = stream;	}	public String getOutputData()	{		return output;	}	public void run()	{		System.out.println("Started run: " + getName());		final BufferedReader bufferReader = new BufferedReader(new InputStreamReader(inputStream));		String line = null;		try		{			while ((line = bufferReader.readLine()) != null)			{				Utility.log(Level.DEBUG, "COReader: " + getName() + " readLine done");				if (ResourceString.getLocale() != null)					Utility.log(Level.DEBUG, line);				Utility.log(Level.DEBUG, "************I am Here" + line + "\n");				output += line + "\r\n";				Utility.log(Level.DEBUG, "COReader: " + getName() + " waiting for readLine");			}			bufferReader.close();			Utility.log(Level.DEBUG, "COReader: " + getName() + " out of while");		}		catch (IOException objIOException)		{			if (ResourceString.getLocale() != null)			{				Utility.log(Level.ERROR, ResourceString.getString("io_exeception_reading_cmd_output") +				objIOException.getMessage());				output = ResourceString.getString("io_exeception_reading_cmd_output");			}			else			{				output = "io exeception reading cmd output";			}		}		finally {			isDone = true;		}	}	public boolean isDone() {		return isDone;	}}